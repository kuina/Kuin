var primes: []bit64
var primesBin: []char

func _init()
	do @primes :: [2b64, 3b64, 5b64, 7b64, 11b64, 13b64, 17b64, 19b64, 23b64, 29b64, 31b64, 37b64]
	do @primesBin :: "\uF6FE\u2DDA\u6C3F\u9AD6\uBC47\u76A9\u43C2\uD4B9\u9932\u8F2D\u62CC\u6A50\u75A9\u1AE4\u924B\u34D4\u6243\uF09E\uC0F0\u2B24\u14AC\u659B\uBC16\u8152\u2A49\u16B1\u6E09\u058F\u12A0\uBC24\uE45C\u488B\uCCB4\u5BB0\u1D02\u6270\u0552\u891D\uD084\u2A27\u0618\u4F4A\u9099\u89E2\u2761\uC041\u4E12\u3538\uDA06\uB742\uB0A8\u0348\uC904\u8816\u2321\uD4E4\u65CB\u2432\u0876\u834B\u92A4\u6B08\uC980\u5130\u902C\uC021\u28D1\u7813\u5804\u8C6D\u8619\u2102\u481F\u5B94\u2646\u54B4\u4388\u5493\u09A0\u260B\u309C\u6EC1\u040C\u5AE2\uA160\u8458\u070B\u6901\u9A66\u0129\u5264\u2282\uAD06\u4260\u180F\u5485\u6E10\u88A5\u8360\uBC04\u0431\u2290\uB894\u4394\u866D\uB048\u0558\u4C28\uC112\uA203\u42A1\u00C2\u74AA\u8174\u8E0E\u500D\u0093\u7D84\u9342\u1702\uA4C0\u6C52\uA19B\u08C0\u0A01\uD20C\u6542\u9922\u0244\u134E\u96A4\u2A98\u55A5\u5012\u3060\u2009\u69C1\u4483\u1A10\u9665\u6030\u0998\uA13C\uC846\u9802\u34AD\u0C4A\u8091\u81A2\u2904\uD25C\u0802\u1919\u0106\u2141\uB068\u2A49\uB19B\u10C6\u302C\uD0CD\u0710\uA030\u4222\u8A0F\u4634\u6100\u5081\u93A2\u080A\u044D\u0B99\u3C34\u0114\u1929\uC6C0\u0050\uE522\u1240\u1C26\u3285\u454B\uC12B\u98C0\u0E26\u4014\u6893\u1D80\u4962\u1440\u3434\u2C52\u218A\u8270\u170C\u5428\u079A\u28AE\uCA24\u0800\u46D1\u2611\uD181\uD182\uB148\uC468\u6850\u1412\u0180\u9A06\u04D8\u2C9A\u8823\uCAC0\u2621\u10B9\u0481\uF038\u1890\u8061\uB204\u44C2\u0C0D\u0B46\u9241\u9400\u685A\u6014\u4A12\u0809\uC664\u4702\u3990\u0210\uA34C\u3444\u2181\u88A4\uC0D0\u8568\u0604\u0348\u2023\u1930\u0446\uA2E0\u05D2\uA40C\u1AC2\u0A65\u700C\u0181\u80BB\u0072\u884A\u3299\u2811\u700C\u1324\uA143\u94AC\u2158\u5915\u8AB0\u2520\u50C1\u2490\u1116\uCB00\uA20E\uE0D4\u2B01\uD004\uC0A2\u0D4C\u2260\u4049\u6C31\u1080\u0346\u92A9\u0908\u2421\u4A14\u9021\u663D\u0E81\u0492\u0826\u2E0F\uC019\u6600\u2830\u40E4\uB400\u9030\u6810\u9100\u50E0\u1820\u94CD\u2411\uB084\u8076\uBA01\u4230\u4B08\uCCAB\uD210\u9848\u402C\u22C9\u3004\u1204\u0A4B\u2269\u0542\uC129\u4996\u9065\u24B1\u4C42\u302A\u9084\u0624\uE245\u0CD1\u7C00\uC2A2\u052A\uB040\u0D51\u1881\u00A4\u3F01\u84AC\u0018\uA03C\u4306\u8201\u6250\u4011\u1C2B\u02B0\u2824\uC015\u6188\uD823\u5100\u080C\u4688\u2C80\uAD06\u5840\u3A41\u1015\u0A4A\u8481\u81C6\u0104\uB058\u0492\u613D\uC144\u916A\u0440\u261B\u600C\u4062\u1921\u8681\u4640\u8904\u0966\u1B46\uE010\u2219\u9D81\u9102\u3544\u8238\u21D1\u4C22\u4230\u034D\u7091\u0118\u202C\u9010\uA244\u1288\u0B42\u4080\u8802\u8807\u2050\u4283\u05B0\u1820\u060A\u145C\u2149\u1092\uDA00\u3F08\u56A5\u4051\uA8A6\u0150\u0200\u9265\u0D88\u5121\u5260\uA060\u6224\u438A\u8C16\u5104\u1C2B\u20B1\u2188\u2412\u52C0\uB027\u640C\u0E00\u9118\u0046\u8845\u2081\u4642\u18BC\u0182\uA120\u20E4\u0C49\uF906\u5804\u0A20\u52C1\u41C9\u040A\u0052\u0A0F\uB4E0\u0108\uDD08\u0170\u992E\u8039\u0911\u6422\u4294\u830C\u24C9\u2082\u2105\uC254\uAC46\u4618\u4743\u0030\u8882\u0C4F\u8280\u2291\u1520\u9062\u1640\u001C\u4E1A\u6890\u98B2\u0D20\u002C\u029A\uA10A\u0260\u9B49\uA4F1\u4208\u1484\u4172\u9040\uA438\u620A\u2080\u0884\u1101\uF268\u2D10\u803C\u0196\u2E04\u2215\u01CA\u54B1\u0116\u2342\u42C5\u4A91\u313D\u1904\u940A\u200C\u2200\u5881\u1A84\u300C\u9241\u40C2\u8820\u8804\u114A\uC210\u2510\u4D02\u4110\u240E\u026C\u0382\u2421\u40B4\u1469\uD240\u0012\uC11E\u8292\u8460\u06B4\u0800\uE103\u1162\uA90D\u1090\u4C52\u41A0\u41A0\uA421\u04D8\u0E11\u1113\uC840\u2205\u42A9\u6241\u300E\u4832\uA842\u14A4\u2409\u4023\u8230\u2802\uE205\u6B9A\uA081\u1220\u8625\uA099\u05C0\u282A\u5844\u1C43\u0084\u4288\u5180\u0874\u0120\u9005\u22C1\u0581\u9982\u0600\u8428\u6102\uF003\u8AC6\u0D2D\u400C\u0612\u852E\uC830\u1140\u4665\u0880\u4906\u0002\u992E\u0600\u6940\u84B0\u0A10\u9B03\uD458\u28D8\uA417\u8144\u3045\u5034\u04C8\u1512\u0822\u2F20\u10C0\u6810\u5429\u91A4\u1048\u84A4\u084A\u899C\u0252\u0209\u802C\u4453\u8130\u0046\uA20A\u4201\u4308\u01AC\u40B0\u1404\u8218\u6088\u70B5\u5120\u044A\u0651\u0D42\u040A\uC046\u1820\u1238\u0709\u0021\u9154\u2D22\u5004\u2812\u5991\u8226\u1340\u00A8\u450A\u0994\uC860\u3705\u94C0\u02CB\u3588\uC810\u0003\u3200\u4381\u940E\u40A0\u0D28\uE044\u6091\u20A0\u0980\u0849\u5000\u2892\uE818\u0952\u8606\u4690\u4302\uE003\u10E2\u036D\u6299\u4440\u380D\u4B60\u2268\u8014\u0742\uC810\u8072\u100D\u1604\u621A\u90AC\u8312\uA849\u2600\u4C98\u0404\u9180\uBC62\u4420\u0043\u9493\u4320\u9B28\uB2F1\u0400\u4124\u8396\u1862\u04A8\u4883\u0503\u8810\u0305\uC000\u4651\u3804\u5A04\uA709\uA424\u0811\u2092\u98C6\u1505\uC680\u6082\u94A8\u4920\u020E\uE044\u0A81\u40A1\u1062\u0C00\u6258\u22C9\u08B2\u5020\u8940\uD409\u0908\uC522\u1190\u1840\u00BD\u0B83\u0001\u0014\uA860\u7008\u4681\u6094\u8244\uA528\u103C\u0950\u2819\uC024\u1120\u1289\u054A\u9026\u0002\uB941\uC030\u4C91\u048C\u8252\u314A\uA241\u21D8\u2422\u1894\u0C6D\u5050\u241A\u2403\u0850\u9244\u40A1\u0302\u6138\u0970\u0422\u4085\u22D3\u5D19\u0886\u0529\u1058\u0040\u1886\u9284\u0924\uD400\u43C0\u1480\u0042\u3005\u32A4\u0688\uC522\u83B0\u2140\u8400\u001B\u8002\u01B0\u9069\u1618\u29CA\u8419\u1044\u2A45\u7088\u4502\uC021\u00E0\uAD24\u7050\u2490\u09B9\u1200\u860B\u109C\u4C09\uC002\u9026\u0228\u04C4\u04C8\u1494\u8922\u9A04\uD2A5\u2010\uC821\u8302\u0406\uC454\u2981\u1031\u0234\u002A\u3480\u0040\u403C\u4AC4\u8464\u14A0\u0641\u7000\u8802\u084C\uA2D1\u0C43\u5405\u0222\u8541\u302C\u4300\uE116\uD262\u1509\u0041\u0292\u189A\u4240\uA844\u02C1\u6B08\u4D0B\u00A2\u8124\u2029\u6803\uB484\u5084\u8627\u40F0\u2990\u4802\u5910\u8E23\u6020\u484A\u5091\u01D4\u2F4B\u024C\u6202\u0811\u4160\u972A\u84A4\u0342\uD192\u1800\u2528\u4245\u620A\u900C\u8210\u1104\u1085\u4890\u09A0\u8000\u084E\uA029\u0208\u7006\u4394\u1261\u3408\u0500\u013F\u4200\u2060\u6490\u02C3\u511B\u9184\u806C\uE248\u2010\u11BD\u8000\u1642\u0020\u4803\uB88B\u4842\u2700\uC02D\u2098\u3822\u0912\u884C\u9214\u4D08\u140C\u1200\u800A\u206D\u0298\uC420\u4320\u0726\u4221\u0542\uA900\u1240\u9823\u2410\u4348\u2009\u08D4\u2F00\u8291\u0002\u48B4\u5002\u2260\u00D8\u4152\u408E\u9012\u1A05\u0624\u4410\u2D80\uC914\u9008\u2614\u2D08\u8D84\uC0C0\u0062\u066C\u2252\u1082\u0010\u0103\u8069\u2C82\u011D\u1082\u9042\u12B4\u0988\u641A\u0824\u2B40\u4095\u2491\u7094\u9820\u0703\u9460\u0A09\u8111\uCA14\u0328\u02A0\u4501\u0990\u4850\u8203\u2444\u0188\u8823\u0390\uA422\uC02D\u481A\uC830\u1180\u0007\uB418\u2458\u6407\u4146\u2800\u4610\u0B89\u8111\u0872\uA162\u008D\u0612\u5809\u81C0\u3161\u30C8\u6808\u0099\u4250\u1C05\u8421\u0258\u8D1C\u8244\u8042\u10E5\u0580\u1C26\u9292\uA86C\u8020\u00D0\u0C26\u1324\u0D0C\u20A8\u0018\uC425\uD006\u0805\u440C\u0840\u3422\u1002\u2925\u4218\u6281\u0130\u98C4\u1000\u1438\u0F01\uA191\u40C0\u1E20\u8081\u26DA\u85A2\u8834\uA308\u9414\u4D08\u01A0\u4182\u990A\u0650\u214A\u3812\u5104\u1940\uA081\u0940\u8117\u4B10\u2260\u6001\u00C9\u3020\u9100\u2622\u00CD\u04C1\u2828\u42A6\u0422\u1034\u2C18\u2086\u12D4\u010C\u920C\u2313\u1918\u8032\u9805\uC241\u0500\u4D03\u0230\u0C04\u0604\u6381\u30B5\u0A20\u8046\u04B0\u208A\u6D03\u88D0\u2804\u1019\u4809\u5102\u10C4\u0101\u9208\u4C82\u2D08\u1B60\u102A\u30F0\u0C58\uA107\u4086\u3005\u8405\u044A\u0830\u4032\u9206\u20D0\u6011\u80A3\u4092\u0048\u4275\u4009\uF820\u1204\u8044\u8221\u2090\u400A\u9942\u2E05\u3429\u0802\uF4A8\u8152\u0720\u821D\u2A40\u1180\u1AA0\u1049\u904C\u2601\u401C\u0204\u2524\u5421\u2742\u9C96\u8100\u3046\uA4C0\u4190\uD409\u5380\u2108\u6638\u0A91\u00B4\u08B0\u8923\u42C8\u098A\u4906\u10C6\u1860\u1294\u0042\u9409\u0180\u2846\u3001\u2443\u2CB1\uD204\u9029\u2054\u0A18\u300C\uC204\u2B28\u0640\u61C1\u2CB0\u8056\u3000\uC021\u4989\u1989\u8030\u1500\u6054\u0082\u5483\u1284\u184A\u0400\u2000\uA13B\u88C0\u1662\u5298\u0D42\u8492\u1990\u240D\u0001\u2692\u64A9\uC2E0\u3101\uB040\u4010\uC81B\u4A06\u2C28\u1448\u0101\u0484\u8120\u8242\u3230\u6A00\u540E\u01A2\u0520\u0468\u4203\u9025\u4210\u0128\uA230\u0008\uAD10\u1994\u8424\u7034\u410A\u4002\u1982\u250F\uA001\u48C0\u4801\u9120\u0021\u0488\u4812\uD801\u1850\u0128\uC681\u04C2\u81AC\uC340\u294A\u5085\u0281\u5002\u9050\u1004\uA214\u48D8\u3481\u0824\u0764\uA608\u010A\uE020\uC0C4\u0400\u00A1\u0B48\u500B\u9042\uA90A\uC050\u4810\u1124\u4824\u3240\uA0A0\u6009\u001E\u4806\u2505\u020C\u4608\u0500\u8830\u2943\u1625\u0C19\u542C\u12A0\u9904\u822D\u60C9\uA495\u1220\u842D\u00B1\u2150\u2010\u0A90\u0C03\u4209\u4380\uA018\u8014\u860C\u0014\u0C12\u18A0\u0940\u2001\u2464\u0153\u108E\u4012\u2608\u0028\u4683\u2582\u0104\u384A\u0490\u2C99\uDC0A\u0240\u1904\uC214\u4300\uD422\u0190\u8104\u54E1\u2458\u2C31\u5890\u0067\u0221\u4EC1\u4108\u81A0\u260A\uB200\u28C0\u201C\u8B20\u8200\u0400\u0012\uB18D\u8240\u0D20\u4248\u6113\u2128\u0242\u2308\u4651\u2280\u9902\u0150\u9C4C\u4030\u2910\u80A3\u1920\u1A23\u8478\u2190\uC008\u8102\u3A64\u3014\u488B\u6489\u88A2\u8040\u4240\u0E92\u4515\u4242\u0248\uB0DC\u0148\u5104\u8884\u0A01\u8009\u044B\u0182\u8104\u9040\uD000\u6B01\uC90A\u1080\uA042\uC240\u2188\u2C15\u1A04\u8400\u92E9\u0840\u4920\u5006\u9001\u4684\u0B80\uE4A2\u0000\u0303\u62C8\u04C0\u792D\u0800\u2002\u0080\u4212\u6011\u08E0\u3A20\u1064\u6088\u0082\u0974\u8A44\u7440\u0A18\u8587\u8132\u3120\u0405\u011A\u6894\u51A0\u1120\u8298\u0458\u040D\u0112\u2421\u6080\u4643\u21A2\u9916\u8446\u2240\u2401\u0D2C\u0104\u0723\u9014\u0D5B\u5898\u8252\u040D\u4624\u0301\u8420\uCA04\u0205\u8221\u2A11\u458A\u5212\uAC48\uC440\u6302\u4016\u03A0\u1E40\u9618\u0140\uC423\u9000\u1A00\u00B1\u04C2\uB001\u91C0\u8A25\uC054\u0200\u4005\uD346\uB148\u1030\u0E0B\u0886\u12A0\u1200\u5000\u4208\u0C14\u4964\u2300\u5450\u2A00\u8928\u0392\uA04A\uA251\u4280\uC004\u4980\u090A\u24C0\u0402\u0C0B\u1A14\u9440\u7225\u0089\u3481\u0054\u070B\u2058\u2083\u0D18\u42A4\u0462\u8010\u6748\u4988\uD010\u3308\u40AC\u0413\u3800\u0032\u100C\uA210\u6111\u108D\u4112\u2928\uE624\u0280\u8080\u1AA4\u0543\u2268\u2C0A\u891C\u5280\u2203\u4210\u4100\uC403\u8076\u8004\u40C9\u0E41\u1400\u1B44\u0428\u8090\u0849\u8106\uC2A4\u0704\uD041\u6080\u20A8\u0210\u0343\u9641\u0980\u80A8\u8062\u1508\u2205\u0012\u0C23\u0224\u9E2E\u5008\u24C8\u6005\u8084\u3066\u5685\u40C3\u4503\u89A0\u0C4D\u3091\u2402\u500C\u8300\u8520\u2424\u0409\u6102\u8AD0\u3009\u5041\u02D0\u040A\u4020\u8806\u1624\u6118\u8425\u0340\u2940\u0021\u2AD8\u3084\u1390\u0224\u0260\u0C80\u8404\uCA04\u2A05\u2601\u0D08\u3092\u0892\u2C47\u2008\u4002\u4191\uD322\u1101\u007C\u2200\uB901\u50E2\u0E21\u80C0\u064A\u0882\uC014\u3A00\u8434\u4591\u04A4\u5112\u0828\u8204\u6181\u2420\u0090\u1A4C\uF628\u0110\uE119\u8942\u0421\u5620\u0903\uF110\u81E4\u830A\u5008\u0E12\u00A4\u4A60\uB440\u2018\u0411\u0005\uC292\u002D\u9248\u22C1\u240E\u0322\u8104\u4214\u6418\u1C25\u93C0\u2846\u0000\u4919\uE434\u5034\u0A04\u2640\u0142\uA002\u4AC6\u9060\u240D\u410B\u4001\u01E0\uAA0E\u9018\u6800\u4024\u1040\u042A\u14C4\u0213\u2001\uD8C0\u3909\u0440\u0218\uA594\u8954\u0102\u7020\u2288\u9183\u1100\u0106\u0431\u0902\u8831\u0A24\u0C20\u8028\u205A\uAD00\u9840\u9644\u0084\u0748\u2018\u90A6\u0D2A\u62C1\u0482\u0010\u0B06\uA341\u2428\u6140\u6008\u0006\u0805\u0465\u2251\u9D02\u4222\uA004\uD291\u0008\u1825\u1160\u9840\u821C\u4B00\u2810\u58B0\u1A0C\u1488\u0082\u6022\u02D6\u1420\u0018\u4480\u0019\u8052\u0543\u30C9\u2C01\u3C15\u9044\u9263\u2090\u4252\u5812\u4A20\u1804\u1000\u2483\u8C24\u0200\u134A\uC000\u2489\u1822\u8130\u8C08\u0611\u4058\u3806\u0A30\u810B\uC080\u0950\u0920\u5856\u1C07\u6690\u4C81\uC183\u0084\u204B\uB210\u4280\u3184\u08E4\u9002\u1010\u2001\u8801\u1830\u0220\u0065\u4208\u800C\u0A06\u0809\u8600\u4801\u010F\u5120\uB040\u407D\u0952\u2085\u0104\u032B\uC629\u0D50\u0021\uC342\u3202\u1090\u4801\u30AA\u0944\uA242\uE015\u4E80\u7028\u0126\uA000\u10C4\u2519\u6808\u0852\u150C\u04ED\u21CA\u0508\uC242\u890E\u2484\u0101\u58A0\u00F0\u3006\uC441\u0043\u6084\u08A4\u1506\u0208\u0940\u8526\uD080\u0842\u1228\u0109\u6180\u99A0\uA40D\u5200\u4803\u0815\u5380\u2443\u00F0\u210A\uB802\u9004\u2004\u0488\u4302\u9D02\u4030\u1001\uB4C1\u2A01\u0920\uC050\u2404\u4270\u4B58\u2010\u4214\u8F2B\u0451\u2458\u000C\u1194\u8C01\u6625\u0A4A\u4521\u9126\u0F20\uA050\u0690\u0128\u0A80\u252A\u0458\u0449\uB990\u40E0\u012C\u80A8\u0048\uBD84\u0140\u020F\u1205\u0800\u4086\u4060\u0860\u8408\u0993\uCC13\u0190\u8521\u3640\u2180\u4500\u1202\u1841\u068D\u0608\u85AA\u0050\u8E61\u5091\u6012\u1400\u40C2\u3340\uB0C8\u2101\u100C\u0026\u0A2D\uC480\u40D3\u2024\u8A46\uAB05\u9404\u2008\u5124\uD062\u080C\u224C\u0A11\u0833\u5000\u094B\u6690\u000A\u0931\u4154\u1846"
end func

+func bellmanFord(nodeNum: int, fromNodes: []int, toNodes: []int, values: []int, beginNode: int): []int
	; TODO:
end func

+func dijkstra(nodeNum: int, fromNodes: []int, toNodes: []int, values: []int, beginNode: int): []int
	; TODO:
end func

+func fact(n: float): float
	ret @gamma(n + 1.0)
end func

+func factInt(n: int): int
	; TODO: Refactoring.
	if(n < 0)
		throw 0xE9170006
	end if
	if(n > 20)
		throw 0xE9170006
	end if
	var result: int :: 1
	for i(1, n)
		do result :* i
	end for
	ret result
end func

+func fibonacci(n: int): int
	; TODO: Refactoring.
	if(n < 0)
		throw 0xE9170006
	end if
	if(n > 92)
		throw 0xE9170006
	end if
	if(n = 0)
		ret 0
	end if
	var a: int :: 0
	var b: int :: 1
	for i(2, n)
		var t: int :: a + b
		do a :: b
		do b :: t
	end for
	ret b
end func

+func floydWarshall(nodeNum: int, fromNodes: []int, toNodes: []int, values: []int): [][]int
	; TODO:
end func

+func gamma(n: float): float
	; TODO:
end func

+func gcd(a: int, b: int): int
	if(a = 0)
		if(b = 0)
			throw 0xE9170006
		end if
		ret b
	end if
	if(b = 0)
		ret a
	end if
	if(a < 0)
		do a :: -a
	end if
	if(b < 0)
		do b :: -b
	end if
	if(b > a)
		var t: int :: a
		do a :: b
		do b :: t
	end if
	var r: int
	while loop(true)
		do r :: a % b
		if(r = 0)
			ret b
		end if
		do a :: b
		do b :: r
	end while
end func

+func knapsack(weights: []int, values: []int, maxWeight: int, reuse: bool): int
	; TODO: Refactoring.
	var dp: []int :: #[maxWeight + 1]int
	if(reuse)
		for i(0, ^weights - 1)
			var j: int :: weights[i]
			while(j <= maxWeight)
				var value: int :: dp[j - weights[i]] + values[i]
				if(dp[j] < value)
					do dp[j] :: value
				end if
				do j :+ 1
			end while
		end for
	else
		for i(0, ^weights - 1)
			var j: int :: maxWeight
			while(j >= weights[i])
				var value: int :: dp[j - weights[i]] + values[i]
				if(dp[j] < value)
					do dp[j] :: value
				end if
				do j :- 1
			end while
		end for
	end if
	ret dp[maxWeight]
end func

+func lcm(a: int, b: int): int
	if(a = 0)
		if(b = 0)
			throw 0xE9170006
		end if
		ret 0
	end if
	if(b = 0)
		ret 0
	end if
	if(a < 0)
		do a :: -a
	end if
	if(b < 0)
		do b :: -b
	end if
	ret a / @gcd(a, b) * b
end func

+func modMul(a: int, b: int, modulus: int): int
	if(a < 0 | b < 0 | modulus < 0)
		throw 0xE9170006
	end if
	ret @modMulUnsigned(a $ bit64, b $ bit64, modulus $ bit64) $ int
end func

+func modPow(value: int, exponent: int, modulus: int): int
	if(value < 0 | exponent < 0 | modulus < 0)
		throw 0xE9170006
	end if
	ret @modPowUnsigned(value $ bit64, exponent $ bit64, modulus $ bit64) $ int
end func

+func permutationNext(array: []int): bool
	var left: int :: ^array - 2
	while(left >= 0 & array[left] >= array[left + 1])
		do left :- 1
	end while
	if(left < 0)
		do array.reverse()
		ret false
	end if
	var right: int :: ^array - 1
	while(array[left] >= array[right])
		do right :- 1
	end while
	var tmp: int :: array[left]
	do array[left] :: array[right]
	do array[right] :: tmp
	do left :+ 1
	do right :: ^array - 1
	while(left < right)
		do tmp :: array[left]
		do array[left] :: array[right]
		do array[right] :: tmp
		do left :+ 1
		do right :- 1
	end while
	ret true
end func

+func permutationPrev(array: []int): bool
	var left: int :: ^array - 2
	while(left >= 0 & array[left] <= array[left + 1])
		do left :- 1
	end while
	if(left < 0)
		do array.reverse()
		ret false
	end if
	var right: int :: ^array - 1
	while(array[left] <= array[right])
		do right :- 1
	end while
	var tmp: int :: array[left]
	do array[left] :: array[right]
	do array[right] :: tmp
	do left :+ 1
	do right :: ^array - 1
	while(left < right)
		do tmp :: array[left]
		do array[left] :: array[right]
		do array[right] :: tmp
		do left :+ 1
		do right :- 1
	end while
	ret true
end func

+func prime(n: int): bool
	if(n <= 1)
		ret false
	end if
	var n2: bit64 :: n $ bit64
	if(n2.and(1b64) = 0b64)
		ret n2 = 2b64
	end if
	if(n2 <= 96000b64)
		if(n2 = 3b64)
			ret true
		end if
		var l: bit64 :: n2 % 6b64
		if(l <> 1b64 & l <> 5b64)
			ret false
		end if
		var m: bit64 :: n2 / 6b64 * 2b64 + (l = 1b64 ?(0b64, 1b64))
		ret (@primesBin[m.shr(4) $ int] $ bit16).and((1b16).shl(m.and(15b64) $ int)) <> 0b16
	end if
	
	var enough: bit64
	if(n2 < 2047b64)
		do enough :: 1b64
	elif(n2 < 1373653b64)
		do enough :: 2b64
	elif(n2 < 25326001b64)
		do enough :: 3b64
	elif(n2 < 3215031751b64)
		do enough :: 4b64
	elif(n2 < 2152302898747b64)
		do enough :: 5b64
	elif(n2 < 3474749660383b64)
		do enough :: 6b64
	elif(n2 < 341550071728321b64)
		do enough :: 7b64
	elif(n2 < 3825123056546413051b64)
		do enough :: 9b64
	else
		; n2 < 2^64 < 318665857834031151167461b64
		do enough :: 12b64
	end if
	
	var d: bit64 :: n2 - 1b64
	var s: bit64 :: 0b64
	while(d.and(1b64) = 0b64)
		do s :+ 1b64
		do d :: d.shr(1)
	end while
	var i: bit64 :: 0b64
	while loop(i < enough)
		var x: bit64 :: @modPowUnsigned(@primes[i $ int], d, n2)
		if(x = 1b64 | x = n2 - 1b64)
			do i :+ 1b64
			skip loop
		end if
		var prob: bool :: false
		var j: bit64 :: 0b64
		while loop2(j < s)
			do x :: @modPowUnsigned(x, 2b64, n2)
			if(x = n2 - 1b64)
				do prob :: true
				break loop2
			end if
			do j :+ 1b64
		end while
		if(!prob)
			ret false
		end if
		do i :+ 1b64
	end while
	ret true
end func

+func primeFactors(n: int): []int
	var factors: list<int> :: #list<int>
	while(n > 1)
		var factor: int :: findFactor(n $ bit64) $ int
		do factors.add(factor)
		do n :/ factor
	end while
	var r: []int :: factors.toArray()
	do r.sort()
	ret r
	
	func findFactor(n: bit64): bit64
		var seed: bit32 :: 1b32
		while(true)
			if(n.and(1b64) = 0b64)
				ret 2b64
			end if
			if(@prime(n $ int))
				ret n
			end if
			var a: bit64 :: xorShift(&seed).shl(32)
			do a :: a.or(xorShift(&seed))
			var y: bit64 :: a % (n + 1b64)
			var c: bit64 :: xorShift(&seed) + 1b64
			var m: bit64 :: xorShift(&seed) + 1b64
			var g: bit64
			var r: bit64 :: 1b64
			var q: bit64 :: 1b64
			var ys: bit64 :: 0b64
			var x: bit64
			var i: bit64
			while(g <= 1b64, skip)
				do x :: y
				do i :: 0b64
				while(i < r)
					do y :: (@modMulUnsigned(y, y, n) + c) % n
					do i :+ 1b64
				end while
				var k: bit64 :: 0b64
				while(k < r & g <= 1b64, skip)
					do ys :: y
					var min: bit64 :: m < r - k ?(m, r - k)
					do i :: 0b64
					while(i < min)
						do y :: (@modMulUnsigned(y, y, n) + c) % n
						do q :: @modMulUnsigned(q, x > y ?(x - y, y - x), n)
						do i :+ 1b64
					end while
					do g :: @gcd(q $ int, n $ int) $ bit64
					do k :+ m
				end while
				do r :* 2b64
			end while
			if(g = n)
				while(g <= 1b64, skip)
					do ys :: (@modMulUnsigned(ys, ys, n) + c) % n
					do g :: @gcd((x > ys ?(x - ys, ys - x)) $ int, n $ int) $ bit64
				end while
			end if
			if(g = n)
				do seed :+ 1b32
			else
				do n :: g
			end if
		end while
	end func
	
	func xorShift(seed: &bit32): bit64
		var x: bit32 :: seed
		do x :: x.xor(x.shl(13))
		do x :: x.xor(x.shr(17))
		do x :: x.xor(x.shl(5))
		do seed :: x
		ret x $ bit64
	end func
end func

+func searchBreadthFirst(itemNum: int, maxDepth: int, callback: func<([]int, kuin@Class): bool>, data: kuin@Class): bool
	var q: queue<[]int> :: #queue<[]int>
	if(maxDepth > 0)
		for i(0, itemNum - 1)
			do q.add([i])
		end for
	end if
	while(^q > 0)
		var items: []int :: q.get()
		if(!callback(items, data))
			ret false
		end if
		if(^items < maxDepth)
			for i(0, itemNum - 1)
				do q.add(items ~ [i])
			end for
		end if
	end while
	ret true
end func

+func searchDepthFirst(itemNum: int, maxDepth: int, callback: func<([]int, kuin@Class): bool>, data: kuin@Class): bool
	var s: stack<[]int> :: #stack<[]int>
	if(maxDepth > 0)
		for i(itemNum - 1, 0, -1)
			do s.add([i])
		end for
	end if
	while(^s > 0)
		var items: []int :: s.get()
		if(!callback(items, data))
			ret false
		end if
		if(^items < maxDepth)
			for i(itemNum - 1, 0, -1)
				do s.add(items ~ [i])
			end for
		end if
	end while
	ret true
end func

+func searchPermutation(itemNum: int, callback: func<([]int, kuin@Class): bool>, data: kuin@Class): bool
	var array: []int :: lib@range(0, itemNum - 1, 1)
	while(@permutationNext(array), skip)
		if(!callback(array, data))
			ret false
		end if
	end while
	ret true
end func

func modPowUnsigned(value: bit64, exponent: bit64, modulus: bit64): bit64
	var w: bit64 :: 1b64
	while(exponent > 0b64)
		if(exponent.and(1b64) <> 0b64)
			do w :: @modMulUnsigned(w, value, modulus)
		end if
		do value :: @modMulUnsigned(value, value, modulus)
		do exponent :: exponent.shr(1)
	end while
	ret w
end func

func modMulUnsigned(a: bit64, b: bit64, modulus: bit64): bit64
	if(a > b)
		var t: bit64 :: a
		do a :: b
		do b :: t
	end if
	var w: bit64 :: 0b64
	while(a > 0b64)
		if(a.and(1b64) <> 0b64)
			do w :: (w + b) % modulus
		end if
		do b :: b.shl(1) % modulus
		do a :: a.shr(1)
	end while
	ret w
end func

func permutation(n: int, r: int): int
	ret math@factInt(n) / math@factInt(n - r)
end func

func combination(n: int, r: int): int
	ret math@factInt(n) / math@factInt(n - r) / math@factInt(r)
end func
