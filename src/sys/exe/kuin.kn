+const envCui: bit64 :: 0b64
+const envWnd: bit64 :: 1b64

+class Class()
	func ctor()
	end func
	
	func _dtor()
	end func
	
	+func cmp(t: @Class): int
		throw 0xE9170004
	end func
	
	func _copy(): @Class
	end func
	
	func _toBin(): []bit8
	end func
	
	func _fromBin(bin: []bit8, idx: &int): @Class
	end func
	
	+func toStr(): []char
		ret ""
	end func
end class

func[d0000.knd]_init()
end func

func[d0000.knd]_fin()
end func

func[d0000.knd]_err(excpt: int)
end func

func _initVars()
end func

func _finVars()
end func

+class ListPtr()
	*func[__ndc]ctor()
	end func
	
	var ptr: int
end class

func _absFloat(me_: float): float
	ret me_ >= 0.0 ?(me_, -me_)
end func

func _absInt(me_: int): int
	ret me_ >= 0 ?(me_, -me_)
end func

func[d0000.knd, __any, __tkv]_addDict(me_: int, type: []int, key: int, item: int)
end func

func[d0000.knd, __any, __tch]_addList(me_: int, type: []int, item: int)
end func

func[d0000.knd, __any, __tch]_addQueue(me_: int, type: []int, item: int)
end func

func[d0000.knd, __any, __tch]_addStack(me_: int, type: []int, item: int)
end func

func[d0000.knd, __any, __tme, __rme]_and(me_: int, type: []int, n: int): int
end func

func[d0000.knd, __any]_del(me_: int, type: []int)
end func

func[d0000.knd, __any, __tch]_delDict(me_: int, type: []int, key: int)
end func

func[d0000.knd, __any]_delNext(me_: int, type: []int)
end func

func[d0000.knd, __any, __rme]_endian(me_: int, type: []int): int
end func

func[d0000.knd, __any, __tch]_exist(me_: int, type: []int, key: int): bool
end func

func[d0000.knd, __any, __tch]_fill(me_: int, type: []int, value: int)
end func

func[d0000.knd, __any, __tch]_findArray(me_: int, type: []int, item: int, start: int): int
end func

func[d0000.knd, __any, __tch]_findBin(me_: int, type: []int, item: int): int
end func

func[d0000.knd, __any, __tch]_findLastArray(me_: int, type: []int, item: int, start: int): int
end func

func[d0000.knd, __any, __tch]_findLastList(me_: int, type: []int, item: int): bool
end func

func[d0000.knd, __any, __tch]_findList(me_: int, type: []int, item: int): bool
end func

func _findStr(me_: []char, pattern: []char, start: int): int
	if(start = -1)
		do start :: 0
	end if
	if(start < 0)
		ret -1
	end if
	for i(start, ^me_ - ^pattern)
		for j(0, ^pattern - 1)
			if(me_[i + j] <> pattern[j])
				skip i
			end if
		end for
		ret i
	end for
	ret - 1
end func

func _findStrLast(me_: []char, pattern: []char, start: int): int
	if(start = -1)
		do start :: ^me_ - ^pattern
	end if
	if(^me_ <= start)
		ret - 1
	end if
	for i(start < ^me_ - ^pattern ?(start, ^me_ - ^pattern), 0, -1)
		for j(0, ^pattern - 1)
			if(me_[i + j] <> pattern[j])
				skip i
			end if
		end for
		ret i
	end for
	ret - 1
end func

func _findStrEx(me_: []char, pattern: []char, start: int, fromLast: bool, ignoreCase: bool, wholeWord: bool): int
	var f: func<(char, char): bool> :: ignoreCase ?(f1, f2)
	if(fromLast)
		if(start = -1)
			do start :: ^me_ - ^pattern
		end if
		if(^me_ <= start)
			ret - 1
		end if
		for i(start < ^me_ - ^pattern ?(start, ^me_ - ^pattern), 0, -1)
			for j(0, ^pattern - 1)
				if(!f(me_[i + j], pattern[j]))
					skip i
				end if
			end for
			if(wholeWord)
				if(!chk(me_, i, ^pattern))
					skip i
				end if
			end if
			ret i
		end for
		ret - 1
	else
		if(start = -1)
			do start :: 0
		end if
		if(start < 0)
			ret -1
		end if
		for i(start, ^me_ - ^pattern)
			for j(0, ^pattern - 1)
				if(!f(me_[i + j], pattern[j]))
					skip i
				end if
			end for
			if(wholeWord)
				if(!chk(me_, i, ^pattern))
					skip i
				end if
			end if
			ret i
		end for
		ret - 1
	end if
	
	func f1(c1: char, c2: char): bool
		if('A' <= c1 & c1 <= 'Z')
			do c1 :: (c1 $ bit16 - 0x41b16 + 0x61b16) $ char
		end if
		if('A' <= c2 & c2 <= 'Z')
			do c2 :: (c2 $ bit16 - 0x41b16 + 0x61b16) $ char
		end if
		ret c1 = c2
	end func
	
	func f2(c1: char, c2: char): bool
		ret c1 = c2
	end func
	
	func chk(s: []char, pos: int, len: int): bool
		if(pos > 0)
			var c: char :: s[pos - 1]
			if('a' <= c & c <= 'z' | 'A' <= c & c <= 'Z' | '0' <= c & c <= '9' | c = '_')
				ret false
			end if
		end if
		if(pos + len < ^s)
			var c: char :: s[pos + len]
			if('a' <= c & c <= 'z' | 'A' <= c & c <= 'Z' | '0' <= c & c <= '9' | c = '_')
				ret false
			end if
		end if
		ret true
	end func
end func

func[d0000.knd, __any, __kvf]_forEach(me_: int, type: []int, callback: int, data: @Class): bool
end func

func[d0000.knd, __any, __tch, __rch]_getDict(me_: int, type: []int, key: int, existed: &bool): int
end func

func[d0000.knd, __any, __rch]_getList(me_: int, type: []int): int
end func

func[d0000.knd, __any, __rch]_getOffset(me_: int, type: []int, offset: int): int
end func

func[d0000.knd, __any, __mki]_getPtr(me_: int, type: []int, me2: @ListPtr): @ListPtr
end func

func[d0000.knd, __any, __rch]_getQueue(me_: int, type: []int): int
end func

func[d0000.knd, __any, __rch]_getStack(me_: int, type: []int): int
end func

func[d0000.knd, __any]_head(me_: int, type: []int)
end func

func[d0000.knd, __any]_idx(me_: int, type: []int): int
end func

func[d0000.knd, __any, __tch]_ins(me_: int, type: []int, item: int)
end func

func _join(me_: [][]char, delimiter: []char): []char
	var t: int :: ^delimiter * (^me_ - 1)
	for i(0, ^me_ - 1)
		do t :+ ^me_[i]
	end for
	var r: []char :: #[t]char
	var p: int :: 0
	for i(0, ^me_ - 1)
		if(i <> 0)
			for j(0, ^delimiter - 1)
				do r[p] :: delimiter[j]
				do p :+ 1
			end for
		end if
		var s: []char :: me_[i]
		for j(0, ^s - 1)
			do r[p] :: s[j]
			do p :+ 1
		end for
	end for
	ret r
end func

func _lower(me_: []char): []char
	var s: []char :: #[^me_]char
	for i(0, ^me_ - 1)
		if('A' <= me_[i] & me_[i] <= 'Z')
			do s[i] :: (me_[i] $ bit64 - 0x41b64 + 0x61b64) $ char
		else
			do s[i] :: me_[i]
		end if
	end for
	ret s
end func

func[d0000.knd, __any, __rch]_max(me_: int, type: []int): int
end func

func[d0000.knd, __any, __rch]_min(me_: int, type: []int): int
end func

func[d0000.knd, __any]_moveOffset(me_: int, type: []int, offset: int)
end func

func[d0000.knd]_nan(me_: float): bool
end func

func[d0000.knd, __any]_next(me_: int, type: []int)
end func

func[d0000.knd, __any]_nextPermutation(me_: int, type: []int): bool
end func

func[d0000.knd, __any, __rme]_not(me_: int, type: []int): int
end func

func _offset(me_: char, n: int): char
	ret(me_ $ bit64 + n $ bit64) $ char
end func

func[d0000.knd, __any, __tme, __rme]_or(me_: int, type: []int, n: int): int
end func

func[d0000.knd, _peek, __any, __rch]_peekQueue(me_: int, type: []int): int
end func

func[d0000.knd, _peek, __any, __rch]_peekStack(me_: int, type: []int): int
end func

func[d0000.knd, __any]_prev(me_: int, type: []int)
end func

func[d0000.knd, __any]_prevPermutation(me_: int, type: []int): bool
end func

func[d0000.knd, __any, __rme]_repeat(me_: int, type: []int, len: int): int
end func

func _replace(me_: []char, old: []char, new: []char): []char
	if(^old=0)
		ret me_
	end if
	var r: []char :: ""
	var p: int :: 0
	while loop(p < ^me_)
		var p2: int :: me_.findStr(old, p)
		if(p2 = -1)
			do r :~ me_.sub(p, -1)
			break loop
		end if
		do r :~ me_.sub(p, p2 - p) ~ new
		do p :: p2 + ^old
	end while
	ret r
end func

func[d0000.knd, __any]_reverse(me_: int, type: []int)
end func

func[d0000.knd, __any, __rme]_sar(me_: int, type: []int, n: int): int
end func

func[d0000.knd, __any]_setPtr(me_: int, type: []int, ptr: @ListPtr)
end func

func[d0000.knd, __any, __rme]_shl(me_: int, type: []int, n: int): int
end func

func[d0000.knd, __any, __rme]_shr(me_: int, type: []int, n: int): int
end func

func _signFloat(me_: float): float
	ret me_ > 0.0 ?(1.0, me_ < 0.0 ?(-1.0, 0.0))
end func

func _signInt(me_: int): int
	ret me_ > 0 ?(1, me_ < 0 ?(-1, 0))
end func

func[d0000.knd, __any]_sort(me_: int, type: []int)
end func

func _split(me_: []char, delimiter: []char): [][]char
	if(dbg)
		if(^delimiter = 0)
			throw 0xE9170006
		end if
	end if
	var result: list<[]char> :: #list<[]char>
	var p: int :: 0
	while(true)
		var p2: int :: me_.findStr(delimiter, p)
		if(p2 = -1)
			do result.add(me_.sub(p, -1))
			ret result.toArray()
		end if
		do result.add(me_.sub(p, p2 - p))
		do p :: p2 + ^delimiter
	end while
end func

func[d0000.knd, __any, __rme]_sub(me_: int, type: []int, start: int, len: int): int
end func

func[d0000.knd, __any]_tail(me_: int, type: []int)
end func

func[d0000.knd, __any]_term(me_: int, type: []int): bool
end func

func[d0000.knd, __any]_termOffset(me_: int, type: []int, offset: int): bool
end func

func[d0000.knd, __any, __rac]_toArray(me_: int, type: []int): int
end func

func[d0000.knd]_toBit64(me_: []char, success: &bool): bit64
	; TODO:
end func

func[d0000.knd]_toFloat(me_: []char, success: &bool): float
	; TODO:
end func

func[d0000.knd]_toInt(me_: []char, success: &bool): int
	; TODO:
end func

func[d0000.knd, __any]_toStr(me_: int, type: []int): []char
end func

func _toStrFmtFloat(me_: float, fmt: []char): []char
	var plus: bool :: false
	var space: bool :: false
	var minus: bool :: false
	var zero: bool :: false
	var len1: int :: 0
	var len2: int :: 6
	var type: char :: '\0'
	var idx: int :: 0
	if(idx < ^fmt)
		if(fmt[idx] = '+')
			do plus :: true
			do idx :+ 1
		elif(fmt[idx] = ' ')
			do space :: true
			do idx :+ 1
		end if
	end if
	if(idx < ^fmt)
		if(fmt[idx] = '-')
			do minus :: true
			do idx :+ 1
		elif(fmt[idx] = '0')
			do zero :: true
			do idx :+ 1
		end if
	end if
	if(idx < ^fmt & '1' <= fmt[idx] & fmt[idx] <= '9')
		do len1 :: fmt[idx] $ int - '0' $ int
		do idx :+ 1
		if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
			do len1 :: len1 * 10 + fmt[idx] $ int - '0' $ int
			do idx :+ 1
			if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
				do len1 :: len1 * 10 + fmt[idx] $ int - '0' $ int
				do idx :+ 1
			end if
		end if
	end if
	if(idx < ^fmt & fmt[idx] = '.')
		do idx :+ 1
		if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
			do len2 :: fmt[idx] $ int - '0' $ int
			do idx :+ 1
			if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
				do len2 :: len2 * 10 + fmt[idx] $ int - '0' $ int
				do idx :+ 1
				if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
					do len2 :: len2 * 10 + fmt[idx] $ int - '0' $ int
					do idx :+ 1
				end if
			end if
		end if
	end if
	if(idx = ^fmt - 1)
		switch c(fmt[idx])
		case 'f', 'e', 'E', 'g', 'G'
			do type :: c
		end switch
	end if
	if(type = '\0')
		if(dbg)
			throw 0xE9170006
		end if
		ret null
	end if
	
	var sign: []char
	var value: float
	if(me_.nan())
		do sign :: "-"
		do value :: me_
		do zero :: false
	elif(me_ < 0.0)
		do sign :: "-"
		do value :: -me_
	else
		do sign :: plus ?("+", space ?(" ", ""))
		do value :: me_
	end if
	if(value = inf)
		do zero :: false
	end if
	var s: []char
	switch t(type)
	case 'f'
		do s :: @toStrFImpl(value, len2)
	case 'e', 'E'
		do s :: @toStrEImpl(value, len2, t = 'E')
	case 'g', 'G'
		var s1: []char
		var s2: []char
		do s1 :: @toStrFImpl(value, len2)
		do s2 :: @toStrEImpl(value, len2, t = 'G')
		do s :: ^s1 <= ^s2 ?(s1, s2)
	end switch
	var padding: int :: len1 - (^sign + ^s)
	if(padding < 0)
		do padding :: 0
	end if
	if(minus)
		do s :: sign ~ s ~ " ".repeat(padding)
	elif(zero)
		do s :: sign ~ "0".repeat(padding) ~ s
	else
		do s :: " ".repeat(padding) ~ sign ~ s
	end if
	ret s
end func

func _toStrFmtInt(me_: int, fmt: []char): []char
	var plus: bool :: false
	var space: bool :: false
	var minus: bool :: false
	var zero: bool :: false
	var len: int :: 0
	var type: char :: '\0'
	var idx: int :: 0
	if(idx < ^fmt)
		if(fmt[idx] = '+')
			do plus :: true
			do idx :+ 1
		elif(fmt[idx] = ' ')
			do space :: true
			do idx :+ 1
		end if
	end if
	if(idx < ^fmt)
		if(fmt[idx] = '-')
			do minus :: true
			do idx :+ 1
		elif(fmt[idx] = '0')
			do zero :: true
			do idx :+ 1
		end if
	end if
	if(idx < ^fmt & '1' <= fmt[idx] & fmt[idx] <= '9')
		do len :: fmt[idx] $ int - '0' $ int
		do idx :+ 1
		if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
			do len :: len * 10 + fmt[idx] $ int - '0' $ int
			do idx :+ 1
			if(idx < ^fmt & '0' <= fmt[idx] & fmt[idx] <= '9')
				do len :: len * 10 + fmt[idx] $ int - '0' $ int
				do idx :+ 1
			end if
		end if
	end if
	if(idx = ^fmt - 1)
		switch c(fmt[idx])
		case 'd', 'x', 'X', 'u', 'o', 'b'
			do type :: c
		end switch
	end if
	if(type = '\0')
		if(dbg)
			throw 0xE9170006
		end if
		ret null
	end if
	
	var sign: []char
	var value: bit64
	if(type = 'd' & me_ < 0)
		do sign :: "-"
		do value :: (-me_) $ bit64
	else
		do sign :: plus ?("+", space ?(" ", ""))
		do value :: me_ $ bit64
	end if
	var base: bit64
	switch(type)
	case 'd'
		do base :: 10b64
	case 'x', 'X'
		do base :: 16b64
	case 'u'
		do base :: 10b64
	case 'o'
		do base :: 8b64
	case 'b'
		do base :: 2b64
	end switch
	var s: []char :: ""
	while(value > 0b64)
		var r: bit64 :: value % base
		do value :/ base
		var c: char
		if(r <= 9b64)
			do c :: ('0' $ bit64 + r) $ char
		elif(type = 'x')
			do c :: ('a' $ bit64 + (r - 10b64)) $ char
		else
			do c :: ('A' $ bit64 + (r - 10b64)) $ char
		end if
		do s :: c.toStr() ~ s
	end while
	if(^s = 0)
		do s :: "0"
	end if
	var padding: int :: len - (^sign + ^s)
	if(padding < 0)
		do padding :: 0
	end if
	if(minus)
		do s :: sign ~ s ~ " ".repeat(padding)
	elif(zero)
		do s :: sign ~ "0".repeat(padding) ~ s
	else
		do s :: " ".repeat(padding) ~ sign ~ s
	end if
	ret s
end func

func _trim(me_: []char): []char
	var f: int :: -1
	for i(0, ^me_ - 1)
		var c: bit64 :: me_[i] $ bit64
		if(!(c <= 0x20b64 | c = 0xA0b64))
			do f :: i
			break i
		end if
	end for
	if(f = -1)
		ret me_
	end if
	var l: int :: -1
	for i(^me_ - 1, 0, -1)
		var c: bit64 :: me_[i] $ bit64
		if(!(c <= 0x20b64 | c = 0xA0b64))
			do l :: i
			break i
		end if
	end for
	var r: []char :: #[l - f + 1]char
	for i(0, l - f)
		do r[i] :: me_[f + i]
	end for
	ret r
end func

func _trimLeft(me_: []char): []char
	var f: int :: -1
	for i(0, ^me_ - 1)
		var c: bit64 :: me_[i] $ bit64
		if(!(c <= 0x20b64 | c = 0xA0b64))
			do f :: i
			break i
		end if
	end for
	if(f = -1)
		ret me_
	end if
	var r: []char :: #[^me_ - f]char
	for i(0, ^me_ - f - 1)
		do r[i] :: me_[f + i]
	end for
	ret r
end func

func _trimRight(me_: []char): []char
	var l: int :: -1
	for i(^me_ - 1, 0, -1)
		var c: bit64 :: me_[i] $ bit64
		if(!(c <= 0x20b64 | c = 0xA0b64))
			do l :: i
			break i
		end if
	end for
	if(l = -1)
		ret me_
	end if
	var r: []char :: #[l + 1]char
	for i(0, l)
		do r[i] :: me_[i]
	end for
	ret r
end func

func _upper(me_: []char): []char
	var s: []char :: #[^me_]char
	for i(0, ^me_ - 1)
		if('a' <= me_[i] & me_[i] <= 'z')
			do s[i] :: (me_[i] $ bit64 - 0x61b64 + 0x41b64) $ char
		else
			do s[i] :: me_[i]
		end if
	end for
	ret s
end func

func[d0000.knd, __any, __tme, __rme]_xor(me_: int, type: []int, n: int): int
end func

func toStrFImpl(value: float, len: int): []char
	if(value.nan())
		ret "nan"
	elif(value = inf)
		ret "inf"
	end if
	var s: []char :: ""
	do value :+ 0.5 * 10.0 ^ -(len $ float)
	var v1: float :: lib@floor(value)
	var v2: float :: value - v1
	while(v1 >= 1.0)
		var c: char :: ('0' $ int + (v1 % 10.0) $ int) $ char
		do v1 :/ 10.0
		do s :: c.toStr() ~ s
	end while
	if(^s = 0)
		do s :: "0"
	end if
	for i(0, len - 1)
		do v2 :* 10.0
		var c: char :: ('0' $ int + v2 $ int) $ char
		do v2 :- lib@floor(v2)
		do s :~ (i = 0 ?(".", "")) ~ c.toStr()
	end for
	ret s
end func

func toStrEImpl(value: float, len: int, large: bool): []char
	if(value.nan())
		ret large ?("NAN", "nan")
	elif(value = inf)
		ret large ?("INF", "inf")
	elif(value = 0.0)
		ret "0" ~ (len > 0 ?(".", "")) ~ "0".repeat(len) ~ (large ?("E", "e")) ~ "+0"
	end if
	var e: int :: lib@log(10.0, value) $ int
	if((value / 10.0 ^ (e $ float)) $ int = 0)
		do e :- 1
	end if
	do value :/ 10.0 ^ (e $ float)
	do value :+ 0.5 * 10.0 ^ -(len $ float)
	if(value $ int = 10)
		do value :/ 10.0
		do e :+ 1
	end if
	var s: []char :: (('0' $ int + value $ int) $ char).toStr()
	do value :- lib@floor(value)
	for i(0, len - 1)
		do value :* 10.0
		var c: char :: ('0' $ int + value $ int) $ char
		do value :- lib@floor(value)
		do s :~ (i = 0 ?(".", "")) ~ c.toStr()
	end for
	do s :~ (large ?("E", "e")) ~ (e >= 0 ?("+", "-")) ~ (e >= 0 ?(e, -e)).toStr()
	ret s
end func
