+class DC()
	var renderTarget: int
	
	+func[lib_dc.dll, _dcBegin]beginDraw()
	end func
	
	+func[lib_dc.dll, _dcEnd]endDraw()
	end func
	
	; 描画系メソッド
	
	+func[lib_dc.dll, _line]line(
		|x1: float, y1: float, x2: float, y2: float, strokeWidth: float,
		|color: int)
	end func
	
	+func[lib_dc.dll, _rect]rect(
		|x: float, y: float, w: float, h: float, color: int)
	end func
	
	+func[lib_dc.dll, _rectLine]rectLine(
		|x: float, y: float, w: float, h: float, strokeWidth: float,
		|color: int)
	end func
	
	+func[lib_dc.dll, _circle]circle(
		|x: float, y: float, rx: float, ry: float, color: int)
	end func
	
	+func[lib_dc.dll, _circleLine]circleLine(
		|x: float, y: float, rx: float, ry: float, strokeWidth: float,
		|color: int)
	end func
	
	+func[lib_dc.dll, _tri]tri(
		|x1: float, y1: float, x2: float, y2: float, x3: float, y3: float,
		|color: int)
	end func
end class

+class WndDC(@DC)
	var wndRenderTarget: int
	
	*func[lib_dc.dll, _wndDCDtor, _force]_dtor()
	end func
end class

+class GdiDC(@DC)
	var gdiRenderTarget: int
	var hwnd: int
	
	+*func[lib_dc.dll, _gdiDCBegin]beginDraw()
	end func
	
	*func[lib_dc.dll, _gdiDCDtor, _force]_dtor()
	end func
end class

func[d0001.knd, _windowHandle]windowHandle(wnd: wnd@WndBase): int
end func

+func makeWndDC(wnd: wnd@WndBase): @WndDC
	func[lib_dc.dll, _makeWndDC, _make_instance]
		|lambda(me2: @WndDC, hwnd: int): @WndDC
	end func
	ret lambda(@windowHandle(wnd))
end func

+func makeDC(wnd: wnd@WndBase): @GdiDC
	func[lib_dc.dll, _makeGdiDC, _make_instance]
		|lambda(me2: @GdiDC, hwnd: int): @GdiDC
	end func
	ret lambda(@windowHandle(wnd))
end func
