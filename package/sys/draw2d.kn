enum CapStyle
	flat :: 0
	square :: 1
	round :: 2
	triangle :: 3
end enum

enum LineJoin
	miter :: 0
	bevel :: 1
	round :: 2
	miterOrBevel :: 3
end enum

enum DashStyle
	solid :: 0
	dash :: 1
	dot :: 2
	dashDot :: 3
	dashDotDot :: 4
	custom :: 5
end enum

func [d0005.knd, _init] _init()
end func

func [d0005.knd] _fin()
end func

+func [d0005.knd, _line] line(x1: float, y1: float, x2: float, y2: float, strokeWidth: float, color: int)
end func

+func [d0005.knd, _rect] rect(x: float, y: float, width: float, height: float, color: int)
end func

+func [d0005.knd, _rectLine] rectLine(x: float, y: float, width: float, height: float, strokeWidth: float, color: int)
end func

+func [d0005.knd, _circle] circle(x: float, y: float, radiusX: float, radiusY: float, color: int)
end func

+func [d0005.knd, _circleLine] circleLine(x: float, y: float, radiusX: float, radiusY: float, strokeWidth: float, color: int)
end func

+func [d0005.knd, _roundRect] roundRect(x: float, y: float, width: float, height: float, radiusX: float, radiusY: float, color: int)
end func

+func [d0005.knd, _roundRectLine] roundRectLine(x: float, y: float, width: float, height: float, radiusX: float, radiusY: float, strokeWidth: float, color: int)
end func

+func [d0005.knd, _tri] tri(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, color: int)
end func

+class StrokeStyle()
	var strokeStyle: int
	
	*func [d0005.knd, _strokeStyleDtor, _force] _dtor()
	end func
end class

+class Brush()
	var brush: int
	
	*func [_force] _dtor()
	end func
	
	+func [d0005.knd, _brushLine] line(x1: float, y1: float, x2: float, y2: float, strokeWidth: float, strokeStyle: @StrokeStyle)
	end func
	
	+func [d0005.knd, _brushRect] rect(x: float, y: float, width: float, height: float)
	end func
	
	+func [d0005.knd, _brushRectLine] rectLine(x: float, y: float, width: float, height: float, strokeWidth: float, strokeStyle: @StrokeStyle)
	end func
	
	+func [d0005.knd, _brushCircle] circle(x: float, y: float, radiusX: float, radiusY: float)
	end func
	
	+func [d0005.knd, _brushCircleLine] circleLine(x: float, y: float, radiusX: float, radiusY: float, strokeWidth: float, strokeStyle: @StrokeStyle)
	end func
	
	+func [d0005.knd, _brushTri] tri(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float)
	end func
	
	+func [d0005.knd, _brushDraw] draw(geometry: @Geometry)
	end func
	
	+func [d0005.knd, _brushDrawLine] drawLine(geometry: @Geometry, strokeWidth: float, strokeStyle: @StrokeStyle)
	end func
end class

+class BrushSolidColor(@Brush)
	var brushSolidColor: int
	
	*func [d0005.knd, _brushSolidColorDtor, _force] _dtor()
	end func
end class

+class BrushLinearGradient(@Brush)
	var brushLinearGradient: int
	
	*func [d0005.knd, _brushLinearGradientDtor, _force] _dtor()
	end func
end class

+class BrushRadialGradient(@Brush)
	var brushRadialGradient: int
	
	+func [d0005.knd, _brushRadialGradientSetGradientOriginOffset] setGradientOriginOffset(offsetX: float, offsetY: float)
	end func
	
	*func [d0005.knd, _brushRadialGradientDtor, _force] _dtor()
	end func
end class

+class Geometry()
	var geometry: int
	
	+func [d0005.knd, _geometryDraw] draw(color: int)
	end func
	
	+func [d0005.knd, _geometryDrawLine] drawLine(strokeWidth: float, color: int)
	end func
end class

+class GeometryPath(@Geometry)
	var geometryPath: int
	var sink: int
	
	*func [d0005.knd, _geometryPathDtor, _force] _dtor()
	end func
	
	+func [d0005.knd, _geometryPathOpen] open()
	end func
	
	+func [d0005.knd, _geometryPathClose] close()
	end func
	
	+func [d0005.knd, _geometryPathOpenFigure] openFigure(x: float, y: float, filled: bool)
	end func
	
	+func [d0005.knd, _geometryPathCloseFigure] closeFigure(closedPath: bool)
	end func
	
	+func [d0005.knd, _geometryPathAddArc] addArc(x: float, y: float, radiusX: float, radiusY: float, angle: float, ccw: bool, largeArg: bool)
	end func
	
	+func [d0005.knd, _geometryPathAddBezier] addBezier(x1: float, y1: float, x2: float, y2: float, x3: float, y3: float)
	end func
	
	+func [d0005.knd, _geometryPathAddLine] addLine(x: float, y: float)
	end func
	
	+func [d0005.knd, _geometryPathAddQuadraticBezier] addQuadraticBezier(x1: float, y1: float, x2: float, y2: float)
	end func
end class

+func [d0005.knd, _makeBrushSolidColor, _make_instance] makeBrushSolidColor(me2: @BrushSolidColor, color: int): @BrushSolidColor
end func

+func [d0005.knd, _makeBrushLinearGradient, _make_instance] makeBrushLinearGradient(me2: @BrushLinearGradient, x1: float, y1: float, x2: float, y2: float, colorPosition: []float, color: []int): @BrushLinearGradient
end func

+func [d0005.knd, _makeBrushRadialGradient, _make_instance] makeBrushRadialGradient(me2: @BrushRadialGradient, left: float, top: float, right: float, bottom: float, colorPosition: []float, color: []int): @BrushRadialGradient
end func

+func [d0005.knd, _makeStrokeStyle, _make_instance] makeStrokeStyle(me2: @StrokeStyle, startCap: @CapStyle, endCap: @CapStyle, dashCap: @CapStyle, lineJoin: @LineJoin, miterLimit: float, dashStyle: @DashStyle, dashOffset: float, dash: []float): @StrokeStyle
end func

+func [d0005.knd, _makeGeometryPath, _make_instance] makeGeometryPath(me2: @GeometryPath): @GeometryPath
end func
